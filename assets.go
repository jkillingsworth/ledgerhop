// Code generated by go-bindata.
// sources:
// assets/index.html
// assets/ripple/ping.html
// assets/styles.css
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\xbd\x8e\x83\x30\x10\x84\x7b\x24\xde\x61\xcf\xfd\xdd\x8a\xee\x8a\xc5\xcd\xfd\x28\x45\xa4\xa0\x88\x14\x29\x1d\xd8\x60\x2b\x06\x2c\xdb\x0d\x6f\x1f\x61\x43\x94\xca\xe3\x99\xd1\x37\x5a\xfa\xf8\x3d\xfd\xb4\xd7\xe6\x0f\x74\x1c\xad\x2c\x0b\xda\xde\x55\xb1\xea\x65\x59\x00\x50\x34\xd1\xb2\x3c\x72\x3f\xb0\x3f\xcc\x8e\x30\x1b\x29\x1b\x39\x2a\xe8\xb4\xf2\x81\x63\x2d\x2e\xed\xff\xe7\xb7\xc8\x89\x35\xd3\x03\x3c\xdb\x5a\x84\xb8\x58\x0e\x9a\x39\x0a\xd0\x9e\xef\xb5\xc0\x6c\x7d\x75\x21\xac\x6d\xc2\x6d\xac\x2c\xe8\x36\xf7\x4b\x52\x00\xa4\xab\xf7\x55\x5d\x65\xb0\xf6\x80\x7b\x43\xed\x40\x6f\x9c\xb3\x8c\xce\x4c\x83\x90\xe7\xf4\x81\xc6\x4c\x03\xa1\xca\x5c\x7c\x81\x09\xd3\x91\xcf\x00\x00\x00\xff\xff\x13\x16\x89\xe0\xfc\x00\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 252, mode: os.FileMode(438), modTime: time.Unix(1500698033, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ripplePingHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\x4d\x6b\x1b\x31\x10\xbd\x1b\xfc\x1f\xa6\xba\x77\x85\x6f\xa5\x8c\x74\xa9\x5b\x5a\x28\xd4\x18\xf7\x90\xa3\x76\x35\xb6\x44\xb4\xbb\xb2\x34\x0e\x31\xc6\xff\x3d\xec\x87\x37\x36\x71\x08\x39\xed\x3c\xcd\x7b\xf3\x66\x1f\x83\x5f\x96\xff\x7e\x6c\x1e\x56\x3f\xc1\x71\x1d\xf4\x7c\x86\xe3\xb7\xab\xc8\x58\x3d\x9f\x01\x20\x7b\x0e\xa4\xff\x92\xdd\x51\xfa\xdd\x46\x94\xc3\x43\xdf\xab\x89\x0d\x54\xce\xa4\x4c\xac\xc4\xff\xcd\xaf\xaf\xdf\xc4\xd0\x09\xbe\x79\x84\x44\x41\x89\xcc\xc7\x40\xd9\x11\xb1\x00\x97\x68\xab\x44\x51\xc8\xe1\xb1\xa8\x72\xee\xf8\x28\x47\xbb\xf9\x0c\xcb\xd6\x1e\xfb\x0a\x00\xdd\x42\xaf\x7d\x8c\x81\x60\xe5\x9b\x1d\x4a\xb7\x18\x86\xbb\x04\xf2\xc2\xd9\xb6\xa9\x06\x53\xb1\x6f\x1b\x25\x64\xea\xe9\x32\xfa\x66\x27\xa0\x26\x76\xad\x55\x22\xb6\x99\x87\xb5\xba\xdf\x31\xe5\xb8\xfd\x00\xd3\x54\x77\xc8\x42\x15\x4c\xce\x4a\x04\x53\x52\x10\xfa\xcf\x12\x25\xdb\xfb\x94\xad\xa7\x60\x85\x46\xdf\xc4\x03\x03\x1f\x23\x29\xc1\xf4\xcc\x02\x1a\x53\x93\x12\xde\x0a\x90\xfa\x46\x8f\xf2\xca\xef\x23\xef\xcf\x39\xe7\x43\x59\xfb\xc9\xfb\x82\xde\xf7\x47\xf9\x9a\x04\xca\x2e\xc5\x29\xf5\xab\x74\xad\x7f\x1a\xf9\x6b\xda\x1f\x28\xf3\xf7\x51\x1d\x13\xe9\xd3\xa9\x58\xd3\xfe\x7c\x46\xd9\xa1\x61\xd0\x45\x70\xa3\xcc\xb1\x6d\x32\xbd\x91\xe6\x7b\xd2\xee\x1a\xa6\x1b\x40\xd9\x5f\xe4\x4b\x00\x00\x00\xff\xff\x3e\x26\x1b\x45\xa9\x02\x00\x00")

func ripplePingHtmlBytes() ([]byte, error) {
	return bindataRead(
		_ripplePingHtml,
		"ripple/ping.html",
	)
}

func ripplePingHtml() (*asset, error) {
	bytes, err := ripplePingHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ripple/ping.html", size: 681, mode: os.FileMode(438), modTime: time.Unix(1500698033, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stylesCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8d\x4d\x0a\x02\x31\x0c\x46\xf7\x85\xde\x21\x20\x2e\x2d\x15\x71\xd3\xc1\x93\x88\x8b\x76\x12\xc7\x62\xff\xa8\x29\x2a\xe2\xdd\x45\x05\x05\x1d\x86\x2c\xbf\xf7\x5e\x18\x55\xb0\x8e\x82\x14\x37\x29\x00\x00\xce\x1e\xf9\x60\x60\xa9\x29\x76\x52\xdc\xa5\x90\x82\x51\xed\x3d\x05\xfc\x65\x56\x23\x0c\xf8\x54\x1a\x6f\xf9\x5a\x68\xc3\x74\xe1\xdd\x7f\x58\xcf\xa7\xa4\x53\x73\xd1\x8f\x69\xdf\x5f\xa5\xd2\x67\x76\xb6\x3f\x0e\x35\xb7\x84\x8b\x3e\x87\x5c\x0d\xcc\x48\x3f\xaf\x7b\xef\xc5\x22\xfa\x34\x18\xd0\x6a\x4d\xf1\x15\x78\x04\x00\x00\xff\xff\x53\xba\x5e\x10\xf3\x00\x00\x00")

func stylesCssBytes() ([]byte, error) {
	return bindataRead(
		_stylesCss,
		"styles.css",
	)
}

func stylesCss() (*asset, error) {
	bytes, err := stylesCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "styles.css", size: 243, mode: os.FileMode(438), modTime: time.Unix(1500698033, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
	"ripple/ping.html": ripplePingHtml,
	"styles.css": stylesCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"ripple": &bintree{nil, map[string]*bintree{
		"ping.html": &bintree{ripplePingHtml, map[string]*bintree{}},
	}},
	"styles.css": &bintree{stylesCss, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

