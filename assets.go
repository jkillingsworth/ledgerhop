// Code generated by go-bindata.
// sources:
// assets/index.html
// assets/ripple/ping.html
// assets/styles.css
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\xbd\x8e\x83\x30\x10\x84\x7b\x24\xde\x61\xcf\xfd\xdd\x8a\xee\x8a\xc5\xcd\xfd\x28\x45\xa4\xa0\x88\x14\x29\x1d\xd8\x60\x2b\x06\x2c\xdb\x0d\x6f\x1f\x61\x43\x94\xca\xe3\x99\xd1\x37\x5a\xfa\xf8\x3d\xfd\xb4\xd7\xe6\x0f\x74\x1c\xad\x2c\x0b\xda\xde\x55\xb1\xea\x65\x59\x00\x50\x34\xd1\xb2\x3c\x72\x3f\xb0\x3f\xcc\x8e\x30\x1b\x29\x1b\x39\x2a\xe8\xb4\xf2\x81\x63\x2d\x2e\xed\xff\xe7\xb7\xc8\x89\x35\xd3\x03\x3c\xdb\x5a\x84\xb8\x58\x0e\x9a\x39\x0a\xd0\x9e\xef\xb5\xc0\x6c\x7d\x75\x21\xac\x6d\xc2\x6d\xac\x2c\xe8\x36\xf7\x4b\x52\x00\xa4\xab\xf7\x55\x5d\x65\xb0\xf6\x80\x7b\x43\xed\x40\x6f\x9c\xb3\x8c\xce\x4c\x83\x90\xe7\xf4\x81\xc6\x4c\x03\xa1\xca\x5c\x7c\x81\x09\xd3\x91\xcf\x00\x00\x00\xff\xff\x13\x16\x89\xe0\xfc\x00\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 252, mode: os.FileMode(438), modTime: time.Unix(1500698033, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ripplePingHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x53\x4d\x6f\xd4\x30\x10\xbd\xaf\xb4\xff\xc1\xf8\x4e\xac\xde\x10\x1a\xfb\xd2\x82\x40\x42\xa2\x5a\x95\x03\x47\x27\x9e\x5d\x5b\xf8\xab\xf6\xa4\x22\xaa\xfa\xdf\x51\xe2\x6c\x60\xf9\x14\x3d\x65\xde\xf8\xbd\x99\x97\x3c\x07\x5e\xdc\x7c\xbc\xbe\xfb\x7c\xfb\x86\x59\x0a\x5e\xed\x77\xb0\x3e\xe7\x0a\xb5\x51\xfb\x1d\x63\x40\x8e\x3c\xaa\x0f\x68\x4e\x58\xde\xa5\x0c\xa2\x35\x96\xb3\x80\xa4\xd9\x60\x75\xa9\x48\x92\x7f\xba\x7b\xfb\xf2\x15\x6f\x27\xde\xc5\x2f\xac\xa0\x97\xbc\xd2\xe4\xb1\x5a\x44\xe2\xcc\x16\x3c\x4a\xde\x75\xa2\x35\xbb\xa1\xd6\x99\x0f\x62\x5d\xb7\xdf\x41\x9f\xcc\xb4\x54\x8c\x81\xbd\x52\x07\x97\xb3\x47\x76\xeb\xe2\x09\x84\xbd\x6a\xc3\x6d\x39\x33\x8e\xa9\x04\xa6\x07\x72\x29\x4a\x2e\xca\x42\x16\xd9\xc5\x13\x67\x01\xc9\x26\x23\x79\x4e\x95\x9a\xa9\xf9\x65\x74\xbf\x7a\x6f\xb0\x6c\xf5\x8c\x8c\x02\xaf\x7b\xf4\xec\x98\x8a\xe4\xce\x70\xf5\xfe\x06\xc4\xd2\x52\x20\xc8\xfc\x4c\x76\x31\x8f\xc4\x68\xca\x28\x39\xe1\x57\xe2\x2c\xea\x80\x8b\x92\x39\xd3\x26\x5c\xe8\x40\xfc\xb0\xf1\xef\xdb\x87\x14\x82\x8e\x86\xab\xeb\x56\x3c\xc7\xc7\x79\xc6\x62\x66\x03\x0f\xda\x8f\x28\x79\xfb\x4a\x05\xb5\x49\xd1\x4f\xff\xe7\xf3\x1f\x1e\xea\xd8\x07\xb7\xb9\x58\xd1\x1f\x37\x80\xf8\x9e\x0a\x88\x39\xd1\x2d\xff\x2d\x67\xe3\x1e\x56\xf6\x01\xef\x47\xac\xf4\x7a\xd5\xe6\x82\xea\xf1\xb1\x3b\xe0\xfd\xd3\x13\x88\x19\xb5\x31\x67\xc1\x85\xb2\xe6\x14\x2b\xfe\x22\xad\xbf\x93\xce\xb7\x72\xbb\x8b\x20\x96\x3f\xe3\x5b\x00\x00\x00\xff\xff\x28\x1f\x36\xdf\x31\x03\x00\x00")

func ripplePingHtmlBytes() ([]byte, error) {
	return bindataRead(
		_ripplePingHtml,
		"ripple/ping.html",
	)
}

func ripplePingHtml() (*asset, error) {
	bytes, err := ripplePingHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ripple/ping.html", size: 817, mode: os.FileMode(438), modTime: time.Unix(1500767360, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stylesCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\xcb\x4a\xc6\x30\x10\x85\xf7\x81\xbc\xc3\x80\xeb\x4a\x44\x04\xc9\x8f\x4f\x22\x2e\x92\x66\x5a\x83\x93\x4c\x48\xa7\x68\x11\xdf\x5d\x7a\xa5\x52\x39\x9b\x61\xe0\x3b\x97\x8e\x6b\x02\x71\x9e\x50\xab\x6f\xad\x00\x00\x3c\xd7\x80\xb5\x69\x99\xc8\x95\x01\x2d\xec\xd7\x4d\xab\x1f\xad\xb4\x5a\x18\x72\x1e\xe9\x60\x3a\x62\x27\x16\x08\x3b\xb9\xad\x9f\xcf\x18\xe4\xdd\xc2\x83\xc1\xf4\x87\x8b\xb9\x8c\x62\x2b\xba\xd0\x70\xa6\xe9\x70\x68\x99\xb8\x5a\xb8\x7b\x36\xb3\xae\xc8\xab\x4c\x05\x5f\x04\xbf\xe4\xed\x60\xb6\x8c\xc7\x7f\x33\x56\x60\x18\x7d\x8a\x57\xe4\x5c\xab\xd4\xd3\x76\xd7\x7e\xf4\x95\xc7\x1c\x9a\xbd\x10\x9a\x59\xdb\xaa\xe2\x42\x88\xb9\xb7\x60\xee\x9f\x30\x2d\x06\xbf\x01\x00\x00\xff\xff\x92\x14\xdd\xee\x42\x01\x00\x00")

func stylesCssBytes() ([]byte, error) {
	return bindataRead(
		_stylesCss,
		"styles.css",
	)
}

func stylesCss() (*asset, error) {
	bytes, err := stylesCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "styles.css", size: 322, mode: os.FileMode(438), modTime: time.Unix(1500768226, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html":       indexHtml,
	"ripple/ping.html": ripplePingHtml,
	"styles.css":       stylesCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"ripple": &bintree{nil, map[string]*bintree{
		"ping.html": &bintree{ripplePingHtml, map[string]*bintree{}},
	}},
	"styles.css": &bintree{stylesCss, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
