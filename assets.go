// Code generated by go-bindata.
// sources:
// assets/index.html
// assets/ripple/ping.html
// assets/styles.css
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\x3f\x0f\x82\x30\x10\xc5\x77\x12\xbe\xc3\xd9\x5d\x1b\x36\x87\xa3\x8b\x7f\xe2\x60\x22\x31\x38\x38\x56\x38\x69\x63\x81\xa6\xed\xc2\xb7\x37\xb4\x60\x9c\xee\xdd\x7b\x97\xdf\xcb\xe1\xe6\x78\x3b\xd4\xcf\xea\x04\x2a\xf4\x46\xe4\x19\x2e\x73\x56\x24\x5b\x91\x67\x00\x18\x74\x30\x24\xae\xd4\x76\xe4\x2e\xa3\x45\x9e\x8c\x98\xf5\x14\x24\x34\x4a\x3a\x4f\xa1\x64\x8f\xfa\xbc\xdd\xb3\x94\x18\x3d\x7c\xc0\x91\x29\x99\x0f\x93\x21\xaf\x88\x02\x03\xe5\xe8\x5d\x32\x9e\xac\x5d\xe3\xfd\x7c\x8d\x7c\x29\xcb\x33\x7c\x8d\xed\x14\x15\x00\xaa\xe2\xbf\x55\x15\x09\xac\xdc\x9a\xcb\x15\xe7\xb4\xb5\x86\xb8\xd5\x43\xc7\xc4\x3d\x2e\x50\xe9\xa1\x43\x2e\x13\x95\xff\xb0\xc8\xe3\x8b\xdf\x00\x00\x00\xff\xff\x94\x06\x13\xa6\xfa\x00\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 250, mode: os.FileMode(438), modTime: time.Unix(1500828769, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ripplePingHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x53\xc1\x6a\x1b\x31\x10\xbd\x1b\xfc\x0f\xd3\xb9\xd7\x22\xb7\x52\x46\xba\x24\x2d\x2d\x14\x1a\x4c\x7a\xe8\x51\x5e\x8d\xbd\xa2\x5a\x49\x91\xc6\xa1\x26\xe4\xdf\xcb\xae\xd6\xdb\x86\x26\x87\xe0\x93\xe6\x8d\xe6\x3d\x3d\xed\x3e\xd1\xbb\x9b\xef\xd7\x77\x3f\x6f\x3f\x41\x2f\x43\x30\xeb\x15\xcd\xeb\x58\xb1\x75\x66\xbd\x02\x20\xf1\x12\xd8\x7c\x63\x77\xe0\xf2\x25\x65\x52\xad\x31\xed\x0d\x2c\x16\xba\xde\x96\xca\xa2\xf1\xc7\xdd\xe7\xf7\x1f\xb0\xed\x04\x1f\x7f\x41\xe1\xa0\xb1\xca\x29\x70\xed\x99\x05\xa1\x2f\xbc\xd7\xb8\xd9\xa8\xd6\xdc\x74\xb5\x8e\xf3\xa4\xe6\xe3\xd6\x2b\xda\x25\x77\x9a\x2a\x00\xea\xaf\xcc\xd6\xe7\x1c\x18\x6e\x7d\x3c\x90\xea\xaf\x9a\x78\x5f\xce\x13\xfb\x54\x06\xb0\x9d\xf8\x14\x35\xaa\x32\x0d\xab\xec\xe3\x01\x61\x60\xe9\x93\xd3\x98\x53\x95\x66\x6a\xbc\x8c\xdd\xcd\xde\x1b\x2c\x4b\x3d\x22\x07\x5d\xb0\xb5\x6a\x0c\x76\xc7\x01\x0d\x4d\x2b\xec\x53\xd1\xe8\x1d\x9a\xaf\x37\xa4\xa6\x96\x21\x25\xee\x65\xea\xde\x73\x70\x68\xc8\xc7\x7c\x14\x90\x53\x66\x8d\xc2\xbf\x05\x21\xda\x81\x27\x1d\xf0\xae\xe9\x3d\x53\x21\xf5\x8f\x9b\xb7\x38\xeb\xd2\x30\xd8\xe8\xd0\x5c\xb7\xe2\x72\x8f\x67\xc5\xc9\xe8\x02\x1e\x6c\x38\xb2\xc6\xf6\x75\x0b\x5b\x97\x62\x38\x5d\x72\x87\x37\xf9\xab\xc7\xdd\xe0\x17\x87\x33\x7a\xf5\x74\x52\x7f\xff\x34\xa9\x31\x25\x4b\xa6\x96\xec\x38\xff\x30\x4f\x6f\xf9\xfe\xc8\x55\x3e\xce\xdc\x5c\xd8\x3c\x3e\x6e\xb6\x7c\xff\xf4\x44\x6a\x44\x4d\xe6\x4c\x78\xc6\xac\x39\xc5\xca\xff\x51\xeb\x4b\xd4\x31\xe9\x4b\xbe\x49\x4d\xaf\xed\x4f\x00\x00\x00\xff\xff\xff\x30\xc4\x9c\x85\x03\x00\x00")

func ripplePingHtmlBytes() ([]byte, error) {
	return bindataRead(
		_ripplePingHtml,
		"ripple/ping.html",
	)
}

func ripplePingHtml() (*asset, error) {
	bytes, err := ripplePingHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ripple/ping.html", size: 901, mode: os.FileMode(438), modTime: time.Unix(1500828548, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stylesCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xd1\x4a\x03\x31\x10\x45\xdf\x03\xf9\x87\x01\xf1\x45\xd8\x12\x11\x41\x52\xfc\x12\xe9\x43\xb2\x33\x5b\x83\x93\x4c\xc8\x66\xb1\x55\xfc\x77\x69\xeb\x2e\xdd\x20\xe5\xbe\x04\x72\xee\x61\xb8\x83\x94\x08\xd5\x79\x26\xad\xbe\xb5\x02\x00\xf0\x52\x90\x4a\xd7\x0b\xb3\xcb\x23\x59\x98\x5f\x5b\xad\x7e\xb4\xd2\xea\xd2\x41\x78\xb8\xaa\x1c\xba\x31\x7c\x85\xb4\xb7\x73\xdd\xcb\x61\x7b\xf9\xfc\x0c\x58\xdf\x2d\x3c\x1a\x73\xdf\x18\x36\xec\x3c\xf1\x62\x59\x40\x8a\x2d\x38\x04\x62\x6c\xc1\xa7\x16\x5c\xeb\x06\x16\x57\x2d\x30\x0d\x75\x45\x85\x94\xa7\xfa\x56\xc8\xa1\x24\x3e\xee\x16\xbe\x17\x96\x62\xe1\xee\xc5\x9c\xf2\x4f\xa5\x1e\x33\xbd\x8e\x93\x8f\xa1\xee\x6e\x1d\x9d\xcb\xd5\x98\xae\xff\xd8\x17\x99\x12\x76\xb3\x9f\xcc\x29\x7f\xe3\x64\x87\x78\x9e\xcd\x6c\x9e\x29\x9e\x05\xbf\x01\x00\x00\xff\xff\xeb\x6b\x25\x6b\x93\x01\x00\x00")

func stylesCssBytes() ([]byte, error) {
	return bindataRead(
		_stylesCss,
		"styles.css",
	)
}

func stylesCss() (*asset, error) {
	bytes, err := stylesCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "styles.css", size: 403, mode: os.FileMode(438), modTime: time.Unix(1500828598, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html":       indexHtml,
	"ripple/ping.html": ripplePingHtml,
	"styles.css":       stylesCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"ripple": &bintree{nil, map[string]*bintree{
		"ping.html": &bintree{ripplePingHtml, map[string]*bintree{}},
	}},
	"styles.css": &bintree{stylesCss, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
