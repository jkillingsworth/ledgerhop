// Code generated by go-bindata.
// sources:
// assets/index.html
// assets/ripple/account-info.html
// assets/ripple/account-lines.html
// assets/ripple/ping.html
// assets/styles.css
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\x4f\x4b\xc4\x30\x10\xc5\xef\x85\x7e\x87\x98\xfb\x3a\xec\x9e\x3c\x4c\x03\xe2\x1f\x14\x16\x5c\x64\x3d\x78\x8c\xed\xb4\x09\xce\x26\x25\x49\x0f\xfb\xed\xa5\x49\xad\x7a\x11\xf6\x34\x7f\xde\x7b\xf9\x91\x04\xaf\xee\x5f\xee\x8e\xef\x87\x07\x61\xd2\x89\x55\x5d\xe1\x52\xe7\x8e\x74\xa7\xea\x4a\x08\x4c\x36\x31\xa9\x3d\x75\x03\x85\x27\x3f\x22\x94\x45\xd6\x4e\x94\xb4\x68\x8d\x0e\x91\x52\x23\xdf\x8e\x8f\x9b\x1b\x59\x14\xb6\xee\x53\x04\xe2\x46\xc6\x74\x66\x8a\x86\x28\x49\x61\x02\xf5\x8d\x84\xb2\xba\x6e\x63\x9c\xdd\x08\x0b\xac\xae\xf0\xc3\x77\xe7\xdc\x09\x81\x66\xfb\x9b\x6a\xb6\xe5\x60\x13\x56\x7d\xa7\x5e\xed\x38\x32\x21\x98\x5d\x11\x27\xce\x35\xf3\x15\xea\x6f\x5e\xc8\x36\x18\xad\x1b\xa4\x3a\x58\x37\x20\x68\x85\xc0\xf6\x3f\xb7\x6e\x5b\x3f\xb9\xb4\xb1\xae\xf7\x52\xdd\x96\x49\x3c\xbb\xde\x5f\x92\x66\xeb\x28\xfe\xc4\xf7\xf3\xf8\x27\x8f\x30\x2d\x4f\x0e\xeb\xe5\x11\xf2\x47\x7c\x05\x00\x00\xff\xff\x7c\xc7\x3a\x0e\xa0\x01\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 416, mode: os.FileMode(438), modTime: time.Unix(1500847970, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rippleAccountInfoHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x51\x6b\xdc\x30\x0c\x7e\x3f\xb8\xff\xa0\xe9\xbd\x67\xfa\x36\x86\x62\x18\xed\xc6\x0a\x83\x8d\xa3\x7b\xd8\xd3\xf0\xc5\xca\x62\xe6\xc4\xa9\xed\x1c\x3b\x4a\xff\xfb\x88\xed\xa4\x57\x76\x1b\x2d\xd7\x27\x4b\xb2\xbe\xcf\x9f\x14\x45\xf4\xe6\xfa\xcb\xd5\xed\xf7\xaf\x1f\xa0\x8d\x9d\x95\xeb\x15\x95\x73\xb2\x58\x69\xb9\x5e\x01\x50\x34\xd1\xb2\xfc\xcc\xfa\x27\xfb\x4f\x6e\x20\x91\x03\xe9\xae\xe3\xa8\xa0\x6e\x95\x0f\x1c\x2b\xfc\x76\xfb\xf1\xe2\x2d\xe6\x1b\x6b\xfa\x5f\xe0\xd9\x56\x18\xe2\xc1\x72\x68\x99\x23\x42\xeb\xb9\xa9\x70\xb3\x11\x39\xb8\xa9\x43\x98\xf2\x49\x94\xe7\xd6\x2b\xda\x39\x7d\x48\x16\x00\xb5\x97\x72\x6b\x86\xc1\x32\xbc\xaf\x6b\x37\xf6\x11\x6e\xfa\xc6\x91\x68\x2f\xf3\x23\xad\x9f\x33\x1b\xe7\x3b\x50\x75\x34\xae\xaf\x50\xf8\x04\x12\x2a\x83\x2e\x4c\xdf\x38\x84\x8e\x63\xeb\x74\x85\x83\x0b\x31\x8b\x9c\x8a\x53\xbb\x52\x4b\x76\xfd\x62\x4f\x9e\x86\xda\xaa\x10\x2a\xb4\x6a\xc7\x16\x25\xa5\x13\x1a\xe7\x2b\x34\x1a\xe5\xcd\x35\x89\x14\x92\x24\xa2\x3e\x0d\x6d\x0c\x5b\x8d\x92\x4c\x3f\x8c\x11\xe2\x61\xe0\x0a\x23\xff\x8e\x08\xbd\xea\x38\xf1\x80\xd1\x99\xef\x09\x0b\x89\x23\x35\x2f\x51\x56\xbb\xae\x53\xbd\x46\x79\x95\x8d\xf3\x35\xce\x8c\x49\xe8\xe2\xec\x95\x1d\xb9\xc2\xd2\xe5\x1f\xb9\xcb\x9e\x95\x76\xbd\x3d\xbc\x52\x2d\x36\x8d\x1d\x96\xf1\x7b\x76\x25\x8f\x77\x00\x14\xd8\x72\x1d\x4b\x29\x85\x30\x55\x32\x93\x1f\x67\x03\x90\x1b\xa6\x31\x9a\xcb\xdb\x2b\x6b\xb4\x8a\xac\x11\x32\x11\x6b\xb9\xc4\x48\xe4\xe4\xff\x53\xd4\xd6\x05\xd6\x28\xf3\xf9\x4c\xcc\xe8\x3d\xf7\x11\x65\x31\x4e\xa2\x48\x64\x49\xc7\xbd\x78\x95\xb6\x97\x6f\x8a\xb2\xfc\x77\xe7\x8f\xd0\xcc\x98\x1a\xbf\xd0\x9f\xa1\xf6\x45\x4a\xc2\xb8\xeb\xcc\xa2\xa5\x78\xff\x7c\x9d\xc4\xe3\x5a\x20\x31\xad\x96\x65\x21\x2d\x0b\x47\x9b\x7d\xc9\xde\xf2\xdd\xc8\x21\xbe\x2b\xd8\xc1\xb3\xbc\xbf\xdf\x6c\xf9\xee\xe1\x81\xc4\xe4\x65\x9a\x19\xf0\x04\x19\x06\xd7\x07\xfe\x0b\x1a\x4e\x41\xa7\x35\xb9\x2c\x47\x12\x69\x55\xff\x09\x00\x00\xff\xff\x6e\x53\x1f\x52\xc2\x05\x00\x00")

func rippleAccountInfoHtmlBytes() ([]byte, error) {
	return bindataRead(
		_rippleAccountInfoHtml,
		"ripple/account-info.html",
	)
}

func rippleAccountInfoHtml() (*asset, error) {
	bytes, err := rippleAccountInfoHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ripple/account-info.html", size: 1474, mode: os.FileMode(438), modTime: time.Unix(1500847606, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rippleAccountLinesHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x51\x6b\xdc\x30\x0c\x7e\x2f\xf4\x3f\x68\x7a\xef\x99\xbe\x8d\xa1\x18\x46\xbb\xb1\x41\x61\xe3\xe8\x1e\xf6\x34\x7c\xb1\x6e\x31\x73\xec\xd4\x76\x8e\x1d\xa5\xff\x7d\xc4\x76\xd2\x2b\xbb\x8d\x96\xeb\x93\x25\x59\xdf\xe7\x4f\x8a\x22\x7a\x73\xfd\xe5\xea\xf6\xfb\xd7\x0f\xd0\xa5\xde\xca\xf3\x33\xaa\xe7\x64\xb1\xd2\xf2\xfc\x0c\x80\x92\x49\x96\xe5\x0d\xeb\x9f\x1c\x3e\xf9\x81\x44\x09\xe4\xbb\x9e\x93\x82\xb6\x53\x21\x72\x6a\xf0\xdb\xed\xc7\x8b\xb7\x58\x6e\xac\x71\xbf\x20\xb0\x6d\x30\xa6\xbd\xe5\xd8\x31\x27\x84\x2e\xf0\xb6\xc1\xd5\x4a\x94\xe0\xaa\x8d\x71\xca\x27\x51\x9f\x3b\x3f\xa3\x8d\xd7\xfb\x6c\x01\x50\x77\x29\xd7\x66\x18\x2c\xc3\xfb\xb6\xf5\xa3\x4b\x70\x63\x1c\x47\x12\xdd\x65\x79\xa5\x0b\x73\xea\xd6\x87\x1e\x54\x9b\x8c\x77\x0d\x8a\x90\x51\x42\x15\xd4\x85\x9d\x50\x08\x3d\xa7\xce\xeb\x06\x07\x1f\x53\x91\x39\x95\xa7\x36\xb5\x9a\xe2\x86\xc5\x9e\x3c\x0d\xad\x55\x31\x36\x68\xd5\x86\x2d\x4a\xca\x27\x6c\x7d\x68\xd0\x68\x94\x9f\xaf\x49\xe4\x90\x24\x91\xf4\x71\xe8\xd6\xb0\xd5\x28\xc9\xb8\x61\x4c\x90\xf6\x03\x37\x98\xf8\x77\x42\x70\xaa\xe7\xcc\x03\x46\x17\xbe\x27\x2c\x24\x0e\xd4\xbc\x44\x59\xeb\xfb\x5e\x39\x8d\xf2\xaa\x18\xa7\x6b\x9c\x19\xb3\xd0\xc5\xd9\x29\x3b\x72\x83\xb5\xcd\x3f\x6a\x9b\x03\x2b\xed\x9d\xdd\xbf\x52\x31\x36\x4f\x1e\xd6\x09\x7c\x76\x29\x8f\x77\x00\x14\xd9\x72\x9b\x6a\x2d\x95\x30\x97\x32\x93\x1f\x66\x03\x90\x1f\xa6\x41\x9a\xeb\xdb\x29\x6b\xb4\x4a\xac\x11\x0a\x11\x6b\xb9\xc4\x48\x94\xe4\xff\x53\xb4\xd6\x47\xd6\x28\xcb\xf9\x4c\xcc\x18\x02\xbb\x84\xb2\x1a\x47\x51\x24\x8a\xa4\xc3\x5e\xbc\x4a\xdb\xeb\x47\x45\x59\x7f\xbd\xd3\x67\x68\x66\xcc\x8d\x5f\xe8\x4f\x50\xfb\x22\x25\x71\xdc\xf4\x66\xd1\x52\xbd\x7f\xbe\x4e\xe2\x71\x2f\x90\x98\x96\xcb\xb2\x93\x96\x95\xa3\xcd\xae\x66\xaf\xf9\x6e\xe4\x98\xde\x55\xec\x10\x58\xde\xdf\xaf\xd6\x7c\xf7\xf0\x40\x62\xf2\x0a\xcd\x0c\x78\x82\x8c\x83\x77\x91\xff\x82\xc6\x63\xd0\x69\x53\x2e\xfb\x91\x44\xde\xd6\x7f\x02\x00\x00\xff\xff\x07\x73\x24\x35\xc5\x05\x00\x00")

func rippleAccountLinesHtmlBytes() ([]byte, error) {
	return bindataRead(
		_rippleAccountLinesHtml,
		"ripple/account-lines.html",
	)
}

func rippleAccountLinesHtml() (*asset, error) {
	bytes, err := rippleAccountLinesHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ripple/account-lines.html", size: 1477, mode: os.FileMode(438), modTime: time.Unix(1500830165, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ripplePingHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x53\xc1\x6a\x1b\x31\x10\xbd\x1b\xfc\x0f\xd3\xb9\xd7\x22\xb7\x52\x46\xba\x24\x2d\x2d\x14\x1a\x4c\x7a\xe8\x51\x5e\x8d\xbd\xa2\x5a\x49\x91\xc6\xa1\x26\xe4\xdf\xcb\xae\xd6\xdb\x86\x26\x87\xe0\x93\xe6\x8d\xe6\x3d\x3d\xed\x3e\xd1\xbb\x9b\xef\xd7\x77\x3f\x6f\x3f\x41\x2f\x43\x30\xeb\x15\xcd\xeb\x58\xb1\x75\x66\xbd\x02\x20\xf1\x12\xd8\x7c\x63\x77\xe0\xf2\x25\x65\x52\xad\x31\xed\x0d\x2c\x16\xba\xde\x96\xca\xa2\xf1\xc7\xdd\xe7\xf7\x1f\xb0\xed\x04\x1f\x7f\x41\xe1\xa0\xb1\xca\x29\x70\xed\x99\x05\xa1\x2f\xbc\xd7\xb8\xd9\xa8\xd6\xdc\x74\xb5\x8e\xf3\xa4\xe6\xe3\xd6\x2b\xda\x25\x77\x9a\x2a\x00\xea\xaf\xcc\xd6\xe7\x1c\x18\x6e\x7d\x3c\x90\xea\xaf\x9a\x78\x5f\xce\x13\xfb\x54\x06\xb0\x9d\xf8\x14\x35\xaa\x32\x0d\xab\xec\xe3\x01\x61\x60\xe9\x93\xd3\x98\x53\x95\x66\x6a\xbc\x8c\xdd\xcd\xde\x1b\x2c\x4b\x3d\x22\x07\x5d\xb0\xb5\x6a\x0c\x76\xc7\x01\x0d\x4d\x2b\xec\x53\xd1\xe8\x1d\x9a\xaf\x37\xa4\xa6\x96\x21\x25\xee\x65\xea\xde\x73\x70\x68\xc8\xc7\x7c\x14\x90\x53\x66\x8d\xc2\xbf\x05\x21\xda\x81\x27\x1d\xf0\xae\xe9\x3d\x53\x21\xf5\x8f\x9b\xb7\x38\xeb\xd2\x30\xd8\xe8\xd0\x5c\xb7\xe2\x72\x8f\x67\xc5\xc9\xe8\x02\x1e\x6c\x38\xb2\xc6\xf6\x75\x0b\x5b\x97\x62\x38\x5d\x72\x87\x37\xf9\xab\xc7\xdd\xe0\x17\x87\x33\x7a\xf5\x74\x52\x7f\xff\x34\xa9\x31\x25\x4b\xa6\x96\xec\x38\xff\x30\x4f\x6f\xf9\xfe\xc8\x55\x3e\xce\xdc\x5c\xd8\x3c\x3e\x6e\xb6\x7c\xff\xf4\x44\x6a\x44\x4d\xe6\x4c\x78\xc6\xac\x39\xc5\xca\xff\x51\xeb\x4b\xd4\x31\xe9\x4b\xbe\x49\x4d\xaf\xed\x4f\x00\x00\x00\xff\xff\xff\x30\xc4\x9c\x85\x03\x00\x00")

func ripplePingHtmlBytes() ([]byte, error) {
	return bindataRead(
		_ripplePingHtml,
		"ripple/ping.html",
	)
}

func ripplePingHtml() (*asset, error) {
	bytes, err := ripplePingHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ripple/ping.html", size: 901, mode: os.FileMode(438), modTime: time.Unix(1500828548, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stylesCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xd1\x4a\x03\x31\x10\x45\xdf\x03\xf9\x87\x01\xf1\x45\xd8\x12\x11\x41\x52\xfc\x12\xe9\x43\xb2\x33\x5b\x83\x93\x4c\xc8\x66\xb1\x55\xfc\x77\x69\xeb\x2e\xdd\x20\xe5\xbe\x04\x72\xee\x61\xb8\x83\x94\x08\xd5\x79\x26\xad\xbe\xb5\x02\x00\xf0\x52\x90\x4a\xd7\x0b\xb3\xcb\x23\x59\x98\x5f\x5b\xad\x7e\xb4\xd2\xea\xd2\x41\x78\xb8\xaa\x1c\xba\x31\x7c\x85\xb4\xb7\x73\xdd\xcb\x61\x7b\xf9\xfc\x0c\x58\xdf\x2d\x3c\x1a\x73\xdf\x18\x36\xec\x3c\xf1\x62\x59\x40\x8a\x2d\x38\x04\x62\x6c\xc1\xa7\x16\x5c\xeb\x06\x16\x57\x2d\x30\x0d\x75\x45\x85\x94\xa7\xfa\x56\xc8\xa1\x24\x3e\xee\x16\xbe\x17\x96\x62\xe1\xee\xc5\x9c\xf2\x4f\xa5\x1e\x33\xbd\x8e\x93\x8f\xa1\xee\x6e\x1d\x9d\xcb\xd5\x98\xae\xff\xd8\x17\x99\x12\x76\xb3\x9f\xcc\x29\x7f\xe3\x64\x87\x78\x9e\xcd\x6c\x9e\x29\x9e\x05\xbf\x01\x00\x00\xff\xff\xeb\x6b\x25\x6b\x93\x01\x00\x00")

func stylesCssBytes() ([]byte, error) {
	return bindataRead(
		_stylesCss,
		"styles.css",
	)
}

func stylesCss() (*asset, error) {
	bytes, err := stylesCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "styles.css", size: 403, mode: os.FileMode(438), modTime: time.Unix(1500828598, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
	"ripple/account-info.html": rippleAccountInfoHtml,
	"ripple/account-lines.html": rippleAccountLinesHtml,
	"ripple/ping.html": ripplePingHtml,
	"styles.css": stylesCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"ripple": &bintree{nil, map[string]*bintree{
		"account-info.html": &bintree{rippleAccountInfoHtml, map[string]*bintree{}},
		"account-lines.html": &bintree{rippleAccountLinesHtml, map[string]*bintree{}},
		"ping.html": &bintree{ripplePingHtml, map[string]*bintree{}},
	}},
	"styles.css": &bintree{stylesCss, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

